import { spawn } from 'child_process';

// 輔助函數：在指定的 Conda 環境中執行命令
const runInCondaEnv = (envName: string, command: string, args: string[], options: any) => {
    return new Promise((resolve, reject) => {
        const condaCommand = 'conda';
        const condaArgs = ['run', '--no-capture-output', '-n', envName, command, ...args];

        const process = spawn(condaCommand, condaArgs, options);

        process.stdout.on('data', (data) => {
            console.log(`stdout: ${data.toString()}`);
        });

        process.stderr.on('data', (data) => {
            console.error(`stderr: ${data.toString()}`);
        });

        process.on('close', (code) => {
            if (code === 0) {
                resolve(`Command executed successfully`);
            } else {
                reject(new Error(`Command failed with code ${code}`));
            }
        });
    });
};

// 主函數
export const AudSlic = async (audioDir: string, modelName: string) => {
    const slicerDir = `output/slicer_opt/${modelName}`;
    const condaEnvName = 'GPTSoVits';  // Conda 環境名稱

    const command = 'python';
    const args = [
        'tools/slice_audio.py',
        audioDir, 
        slicerDir,
        '-34', '4000', '300', '10', '500', '0.9', '0.25', '0', '1'
    ];

    const options = {
        shell: true,
        cwd: process.env.gptsovits_dir_path!, // 指定目錄
    };

    try {
        await runInCondaEnv(condaEnvName, command, args, options);
        return 'Audio slicing completed successfully';
    } catch (error) {
        console.error('Error during audio slicing:', error);
        throw error;
    }
};